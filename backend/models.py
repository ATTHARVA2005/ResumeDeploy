# backend/models.py

from pydantic import BaseModel
from typing import List, Optional
from datetime import datetime

# Pydantic models are used here for:
# 1. Request Body Validation (e.g., JobDescription for POST requests)
# 2. Response Serialization (FastAPI automatically converts Python objects/dicts
#    to JSON based on these models for API responses)
# 3. Generating OpenAPI (Swagger) documentation for your API.

# Model for incoming Job Description data (used in POST /api/job-description)
class JobDescription(BaseModel):
    title: str
    company: str
    description: str

# Model representing a full Resume record as returned by the API
# This mirrors the structure returned by Resume.to_dict() from database.py
class Resume(BaseModel):
    id: Optional[int] = None # ID is optional for creation, but present after saving
    filename: str
    file_path: str # Path to the stored file (local or S3 URL)
    raw_text: str
    extracted_skills: List[str] # Expected as List[str] after JSON parsing from DB
    upload_date: Optional[datetime] = None # Auto-generated by DB, Pydantic handles datetime serialization

# Model representing a full Job Description record as returned by the API
# This mirrors the structure returned by Job.to_dict() from database.py
class Job(BaseModel):
    id: Optional[int] = None # ID is optional for creation, but present after saving
    title: str
    company: str
    description: str
    required_skills: List[str] # Expected as List[str] after JSON parsing from DB
    created_date: Optional[datetime] = None # Auto-generated by DB, Pydantic handles datetime serialization

# Model for the detailed Match Result as stored in the database and returned by API
# This mirrors the structure returned by MatchResult.to_dict() from database.py
class MatchResult(BaseModel):
    id: Optional[int] = None # ID for the match result record itself
    resume_id: int
    job_id: int
    overall_score: float
    matched_skills: List[str]
    missing_skills: List[str]
    additional_skills: List[str] # Skills in resume but not required by job
    match_date: Optional[datetime] = None # Auto-generated by DB, Pydantic handles datetime serialization

# Model for displaying a resume's score in the frontend list (e.g., on the dashboard)
# This model is specifically used as a response model for /api/match-resumes.
# It extends MatchResult implicitly by containing similar fields and adding 'filename'.
# Note: The 'MatchResultResponse' class in main.py is explicitly defined to inherit
# from MatchResult and add 'filename' for the API response. This model serves a similar purpose
# for general representation of a score.
class ResumeScore(BaseModel):
    resume_id: int
    filename: str # Added filename for direct display in match results
    overall_score: float
    matched_skills: List[str]
    missing_skills: List[str]
    # skill_count: int # Removed from previous version as it can be derived or is not always needed here.
                      # The backend MatchResultResponse already provides skill counts if needed.


# This model was in your original models.py but seems unused in the current FastAPI endpoints.
# If you plan to use it for a more granular skill confidence display (e.g., if you had
# a feature showing confidence for each extracted skill), keep it. Otherwise, it can
# be removed to simplify the codebase.
class SkillMatch(BaseModel):
    skill: str
    confidence: float
    category: str
